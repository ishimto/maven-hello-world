name: Github Actions - Maven CI/CD
on:
  push:
    branches:
      - master
      - stage
      - test*
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}/javahello
  CONTAINER_NAME: javaproject


jobs:
  stage:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stage' || github.ref == 'refs/heads/tests'
    env:
      COMPOSE_VERSION: latest
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build with buildx for better caching
      run: |
        docker buildx build \
        --cache-from=type=registry,ref=${DOCKER_IMAGE} \
        --cache-to=type=registry,ref=${DOCKER_IMAGE},mode=max \
        --tag ${DOCKER_IMAGE} \
        .

    - name: Build image
      run: |
        docker compose up -d
        sleep 15
        echo "STATUS=$(docker inspect --format='{{json .State.Health}}' ${CONTAINER_NAME} | jq | grep unhealthy)" >> $GITHUB_ENV

    - name: Test Image && Extract artifact
      run: |
        
        if [[ -z ${STATUS} ]]; then
            echo "success, extract artifact"
            docker cp ${CONTAINER_NAME}:/home/nonroot/pom.xml ./myapp/pom.xml
            VERSION=$(mvn -f myapp/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            docker cp ${CONTAINER_NAME}:/home/nonroot/myapp-${VERSION}.jar .
        else
            echo "container isn't healthy"
            exit 1
        fi
      

    - name: GitHub artifact
      uses: actions/upload-artifact@v4
      with:
        name: myapp-${{ env.VERSION }}
        path: myapp-${{ env.VERSION }}.jar
   
    - name: Publish docker image to Docker Hub
      run: |
        docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE}:${{ github.sha }}
        docker push ${DOCKER_IMAGE}
        docker push ${DOCKER_IMAGE}:${{ github.sha }}


    - name: Setup ssh-agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_STAGE_KEY }}

    - name: Add EC2 host to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_STAGE_HOST }} >> ~/.ssh/known_hosts
    
    - name: Setup docker context
      env:
        HOST: ${{ secrets.EC2_STAGE_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        docker context create ec2 --docker "host=ssh://${USER}@${HOST}"
        docker context use ec2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Tag latest as rollback
      run: docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE}:rollback
      continue-on-error: true

    - name: Pull latest image
      run: docker compose pull

    - name: Deploy EC2
      run: |
        docker compose down
        docker compose up -d
        sleep 15
        echo "DEPLOY_STATUS=$(docker inspect --format='{{json .State.Health}}' ${CONTAINER_NAME} | jq | grep unhealthy)" >> $GITHUB_ENV
    
    - name: Rollback
      run: |
        if [[ -z ${DEPLOY_STATUS} ]]; then
            echo "deploy success, delete old cache, save the cache in use for next build"
            docker system prune -a -f
        else
            echo "container isn't healthy, rollback"
            docker tag ${DOCKER_IMAGE}:rollback ${DOCKER_IMAGE}:latest
            docker compose down
            docker compose up -d
            exit 1
        fi
    
    - name: Publish docker image to Docker Hub
      if: github.ref == 'refs/heads/stage'
      run: |
        docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE}:${{ env.VERSION }}
        docker push ${DOCKER_IMAGE}:${{ env.VERSION }}


    - name: Update pom.xml with new version
      if: github.ref == 'refs/heads/stage'
      uses: EndBug/add-and-commit@v9
      with:
        author_name: ${{ github.actor }}
        author_email: githubactions@ginger.com
        add: 'myapp/pom.xml'
        message: ${{ env.VERSION }}


  production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4

    - name: Get Version
      run: |
        VERSION=$(mvn -f myapp/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "VERSION=$VERSION" >> $GITHUB_ENV


    - name: setup ssh-agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_PROD_KEY }}

    - name: Add EC2 production host to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
    
    - name: Setup docker context
      env:
        HOST: ${{ secrets.EC2_PROD_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        docker context create ec2 --docker "host=ssh://${USER}@${HOST}"
        docker context use ec2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Tag latest as rollback
      run: docker tag ${DOCKER_IMAGE}:stable ${DOCKER_IMAGE}:rollback
      continue-on-error: true

    - name: Deploy EC2
      env:
        COMPOSE_VERSION:  ${{ env.VERSION }}
      run: |
        docker compose down
        docker compose up -d
        sleep 15
        echo "DEPLOY_STATUS=$(docker inspect --format='{{json .State.Health}}' ${CONTAINER_NAME} | jq | grep unhealthy)" >> $GITHUB_ENV
    
    - name: Rollback to stable
      run: |
        if [[ -z ${DEPLOY_STATUS} ]]; then
            echo "deploy success, delete old cache, save the cache in use for next build"
            docker system prune -a -f
        else
            echo "container isn't healthy, rollback"
            docker tag ${DOCKER_IMAGE}:rollback ${DOCKER_IMAGE}:stable
            docker compose down
            docker compose up -d
            exit 1
        fi

    - name: Publish docker image to Docker Hub
      run: |
        docker tag ${DOCKER_IMAGE}:${{ env.VERSION }} ${DOCKER_IMAGE}:stable
        docker push ${DOCKER_IMAGE}:stable


