name: Github Actions - Maven CI/CD
on:
  push:
    branches:
      - master
    paths-ignore:
      - "*.md"

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}/javahello
  CONTAINER_NAME: javaproject


jobs:
  cicd:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4

    - name: Increase patch
      run: |
        mvn -f myapp/pom.xml build-helper:parse-version versions:set -DnewVersion='${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.nextIncrementalVersion}'
        echo "VERSION=$(mvn -f myapp/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

    - name: Build image
      run: |
        docker compose up --build -d
        sleep 15
        echo "STATUS=$(docker inspect --format='{{json .State.Health}}' ${CONTAINER_NAME} | jq | grep unhealthy)" >> $GITHUB_ENV

    - name: Test Image && Extract artifact
      run: |
        
        if [[ -z ${STATUS} ]]; then
            echo "success, extract artifact"
            docker cp ${CONTAINER_NAME}:/home/nonroot/myapp-${{ env.VERSION }}.jar .
        else
            echo "container isn't healthy"
            exit 1
        fi

    - name: GitHub artifact
      uses: actions/upload-artifact@v4
      with:
        name: myapp-${{ env.VERSION }}
        path: myapp-${{ env.VERSION }}.jar
   
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Publish docker image to Docker Hub
      run: |
        docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE}:${{ env.VERSION }}
        docker push ${DOCKER_IMAGE}
        docker push ${DOCKER_IMAGE}:${{ env.VERSION }}

    - name: Update pom.xml with new version
      uses: EndBug/add-and-commit@v9
      with:
        author_name: ${{ github.actor }}
        author_email: githubactions@ginger.com
        add: 'myapp/pom.xml'
        message: ${{ env.VERSION }}

    - name: setup ssh-agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_DEPLOY_KEY }}

    - name: Add EC2 host to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    
    - name: Setup docker context
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        docker context create ec2 --docker "host=ssh://${USER}@${HOST}"
        docker context use ec2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Tag latest as rollback
      run: docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE}:rollback
      continue-on-error: true

    - name: Pull latest image
      run: docker pull ${DOCKER_IMAGE}

    - name: Deploy EC2
      run: |
        docker compose up -d
        sleep 15
        echo "DEPLOY_STATUS=$(docker inspect --format='{{json .State.Health}}' ${CONTAINER_NAME} | jq | grep unhealthy)" >> $GITHUB_ENV
    
    - name: Rollback
      run: |
        if [[ -z ${DEPLOY_STATUS} ]]; then
            echo "deploy success, delete old cache, save the cache in use for next build"
            docker system prune -a -f
        else
            echo "container isn't healthy, rollback"
            docker tag ${DOCKER_IMAGE}:rollback ${DOCKER_IMAGE}:latest
            docker compose down
            docker compose up -d
            exit 1
        fi

